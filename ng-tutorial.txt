ng-tutorial
E:\~Angular~\projects\ng-lesson\

***

добавить "strict": true

.\tsconfig.json

"compilerOptions": {    
    "strict": true
}

тогда покажет ошибку, если
let a: number;
a = null; 

и не покажет ошибку, если 
let a: number | null;
a = null; 

***

.\package.json

базовые команды

"scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "test": "ng test",
    "lint": "ng lint",
    "e2e": "ng e2e"
  },

больше - https://angular.io/cli/serve

***

module (es6 стандарт для модуля, импорт, экспорт и т.д.)

directive - (component - это специальная директива с шаблоном) -

pipe

service

(01:01:48)


***

E:\~Angular~\projects\ng-lesson\src\app\app.module.ts

@NgModule({
  declarations: [
    AppComponent // let/const pipe/directive
  ],
  ...

  bootstrap: [AppComponent] - точка входа

***
Интерполяция:

{{ title }} - процесс вычисления выражения и приведение его к строке

***

ngx-mask

https://www.npmjs.com/package/ngx-mask
https://github.com/JsDaddy/ngx-mask/blob/develop/tslint.json

этим заменить tslint

теперь нужно явно ставить модификаторы доступа - public/private
и всегда писать тип, который ожидаю

public title: {text: string} = {text: 'курс по ангуляру'};

***

public getMoney(): number { //: number - значит то, что метод возвращает число
    
}


(01:19:01)

******************************************************

(01:53)

чтобы все не грузить в app.module.ts
сделать shared.module.ts

его заимпортить в src\app\app.module.ts
imports: [
    ...
    SharedModule
  ],

в shared
import { MatToolbarModule } from '@angular/material';
imports: [
    ...
    MatToolbarModule 
  ],
exports: [
	MatToolbarModule
]

в shared можно не делать import
оставить только:
import { NgModule } from '@angular/core';
import { MatToolbarModule, MatSidenavModule } from '@angular/material';
@NgModule({  
  exports: [
    MatToolbarModule,
    MatSidenavModule
  ]
})
export class SharedModule { }


https://material.angular.io/guide/getting-started

Install Angular Material

ng add @angular/material

Иконки добавятся сами <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
в src\index.html

можно добавить в src\app\header\header.component.html
<mat-toolbar></mat-toolbar>

***

Локальная ссылка шаблона:
#drawer

***

(02:19:18)












TypeScript

Функция может возвращать значение определенного типа, который еще называется типом функции. Возвращаемый тип функции ставится после списка параметров через двоеточие:
function add(a: number, b: number): number {
    return a + b;
}
let result1 = add(1, 2);

                                           ***

Если функция ничего не возвращает, то указывается тип void:
function add(a: number, b: number): void {
    console.log(a + b);
}
add(10, 20);

                                           ***

В принципе мы можем и не указывать тип, тогда он будет выводиться неявно на основе возвращаемого значения:
function add(a: number, b: number) {
    return a + b;
}
let result = add(10, 20);

                                           ***


Чтобы иметь возможность передавать различное число значений в функцию, в TS некоторые параметры можно объявить как необязательные. Необязательные параметры должны быть помечены вопросительным знаком ?. Причем необязательные параметры должны идти после обязательных:

function getName(firstName: string, lastName?: string) {
    if (lastName)
        return firstName + " " + lastName;
    else
        return firstName;
}
  
let name1 = getName("Иван", "Кузнецов");
console.log(name1); // Иван Кузнецов

                                           ***

Параметры по умолчанию позволяют задать начальное значение. И если для такого параметра не передается значение, то он использует значение по умолчанию:
function getName(firstName: string, lastName: string="Иванов") {
     
    return firstName + " " + lastName;
}
 
let name1 = getName("Иван", "Кузнецов");
console.log(name1); // Иван Кузнецов

                                           ***

Если же необходимо, чтобы функция принимала набор однотипных параметров, то используется знак многоточия, после которого идет массив:
function addNumbers(firstNumber: number, ...numberArray: number[]): number {
      
    let result = firstNumber;
    for (let i = 0; i < numberArray.length; i++) {
        result+= numberArray[i];
    }
    return result;
}
  
let num1 = addNumbers(3, 7, 8);
console.log(num1); // 18
  
let num2 = addNumbers(3, 7, 8, 9, 4);
console.log(num2); // 31

                                           ***

class User {
 
    id: number;
    name: string;
    getInfo(): string {
        return "id:" + this.id + " name:" + this.name;
    }
}

let tom: User = new User();
tom.id = 1;
tom.name = "Tom";
console.log(tom.getInfo());

                                           ***

Кроме обычных функций классы имеют специальные функции - конструкторы, которые определяются с помощью ключевого слова constructor. Конструкторы выполняют начальную инициализацию объекта. Например, добавим в класс User конструктор:
class User {
 
    id: number;
    name: string;
    constructor(userId: number, userName: string) {
 
        this.id = userId;
        this.name = userName;
    }
    getInfo(): string {
        return "id:" + this.id + " name:" + this.name;
    }
}
 
let tom: User = new User(1, "Tom");
console.log(tom.getInfo());
tom.id = 4;

                                           ***

Если к свойствам и функциям классов не применяется модификатор, то такие свойства и функции расцениваются как будто они определены с модификатором public. То есть следующее определение класса:

class User {
     
    name: string; //=== public name: string;
    year: number;
}
                                           ***

https://www.youtube.com/watch?v=nyIpDs2DJ_c
                                           ***
